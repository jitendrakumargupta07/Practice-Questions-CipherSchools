ANSWER 1:

#include <iostream>
#include <map>
#include <string>
using namespace std;

map<char, int> characterFrequency(const string& str) {
    map<char, int> freq;
    for (char c : str) {
        freq[c]++;
    }
    return freq;
}

int main() {
    string str = "HelloWorld";
    map<char, int> result = characterFrequency(str);
    for (auto& pair : result) {
        cout << "'" << pair.first << "': " << pair.second << ", ";
    }
    cout << endl;

    str = "C++STL";
    result = characterFrequency(str);
    for (auto& pair : result) {
        cout << "'" << pair.first << "': " << pair.second << ", ";
    }
    cout << endl;

    return 0;
}


ANSWER 2:

#include <iostream>
#include <map>
#include <vector>
#include <numeric>
using namespace std;

map<string, int> averageScore(const map<string, vector<int>>& scores) {
    map<string, int> averages;
    for (const auto& pair : scores) {
        int sum = accumulate(pair.second.begin(), pair.second.end(), 0);
        averages[pair.first] = sum / pair.second.size();
    }
    return averages;
}

int main() {
    map<string, vector<int>> scores = {
        {"Alice", {80, 90, 100}},
        {"Bob", {70, 75, 80}},
        {"Charlie", {60}}
    };
    map<string, int> result = averageScore(scores);
    for (auto& pair : result) {
        cout << "\"" << pair.first << "\": " << pair.second << ", ";
    }
    cout << endl;

    return 0;
}


ANSWER 3:

#include <iostream>
#include <set>
#include <algorithm>
using namespace std;

set<int> mergeSets(const set<int>& set1, const set<int>& set2) {
    set<int> result;
    result.insert(set1.begin(), set1.end());
    result.insert(set2.begin(), set2.end());
    return result;
}

int main() {
    set<int> set1 = {1, 3, 5};
    set<int> set2 = {2, 3, 4, 6};
    set<int> result = mergeSets(set1, set2);
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;

    set1 = {7, 8};
    set2 = {8, 9, 10};
    result = mergeSets(set1, set2);
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}

