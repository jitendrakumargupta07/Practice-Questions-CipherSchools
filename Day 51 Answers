ANSWER 1:

#include <iostream>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

int findDepth(TreeNode* root, int target, int depth) {
    if (root == NULL) {
        return -1;
    }
    if (root->val == target) {
        return depth;
    }
    int leftDepth = findDepth(root->left, target, depth + 1);
    int rightDepth = findDepth(root->right, target, depth + 1);
    
    if (leftDepth != -1) return leftDepth;
    return rightDepth;
}

int main() {
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);

    cout << findDepth(root, 5, 1) << endl; // Output: 3
    cout << findDepth(root, 6, 1) << endl; // Output: -1

    return 0;
}


ANSWER 2:

#include <iostream>
#include <cmath>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

int closestValue(TreeNode* root, int target) {
    int closest = root->val;
    while (root != NULL) {
        if (abs(target - root->val) < abs(target - closest)) {
            closest = root->val;
        }
        if (target < root->val) {
            root = root->left;
        } else if (target > root->val) {
            root = root->right;
        } else {
            break;
        }
    }
    return closest;
}

int main() {
    TreeNode* root = new TreeNode(10);
    root->left = new TreeNode(5);
    root->right = new TreeNode(15);
    root->left->left = new TreeNode(3);
    root->left->right = new TreeNode(7);

    cout << closestValue(root, 6) << endl; // Output: 5
    cout << closestValue(root, 8) << endl; // Output: 7

    return 0;
}
